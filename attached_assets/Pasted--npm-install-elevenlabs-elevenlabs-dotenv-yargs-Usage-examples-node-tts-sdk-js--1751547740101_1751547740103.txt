/**
 * npm install @elevenlabs/elevenlabs dotenv yargs
 *
 * Usage examples:
 * node tts-sdk.js --voice_id=your_voice_id --text="Hello world!" --style=80 --stability=0.4 --similarity=0.8 --output=output.mp3
 */

import fs from "fs";
import dotenv from "dotenv";
import yargs from "yargs";
import { ElevenLabsClient } from "@elevenlabs/elevenlabs";

dotenv.config();

const argv = yargs
  .option("voice_id", { alias: "v", type: "string", demandOption: true, describe: "Voice ID to use" })
  .option("text", { alias: "t", type: "string", describe: "Text to synthesize" })
  .option("text_file", { alias: "f", type: "string", describe: "Read text from a file" })
  .option("style", { type: "number", default: 50, describe: "Style (0-100)" })
  .option("stability", { type: "number", default: 0.5, describe: "Stability (0-1)" })
  .option("similarity", { type: "number", default: 0.7, describe: "Similarity Boost (0-1)" })
  .option("model", { type: "string", default: "eleven_multilingual_v2", describe: "Model ID" })
  .option("output", { alias: "o", type: "string", default: "output.mp3", describe: "Output audio file" })
  .help()
  .argv;

async function run() {
  const eleven = new ElevenLabsClient({
    apiKey: process.env.ELEVENLABS_API_KEY
  });

  let text = argv.text;
  if (argv.text_file) {
    text = fs.readFileSync(argv.text_file, "utf-8");
    console.log(`📝 Loaded text from ${argv.text_file} (${text.length} chars)`);
  }
  if (!text) {
    text = "Hello there! This is ElevenLabs SDK speaking.";
    console.log("⚠️ No text given. Using default:", text);
  }

  console.log("\n🎯 Synthesis parameters:");
  console.table({
    voiceId: argv.voice_id,
    model: argv.model,
    style: argv.style,
    stability: argv.stability,
    similarity: argv.similarity,
    output: argv.output
  });

  // 🗣️ Generate speech with all advanced settings
  const audioStream = await eleven.textToSpeech.convert({
    voiceId: argv.voice_id,
    modelId: argv.model,
    text,
    voiceSettings: {
      stability: argv.stability,
      similarityBoost: argv.similarity,
      style: argv.style
    },
    format: "mp3"
  });

  // Write stream directly to file
  const writeStream = fs.createWriteStream(argv.output);
  audioStream.pipe(writeStream);

  await new Promise((resolve, reject) => {
    writeStream.on("finish", () => {
      console.log("✅ Audio saved to:", argv.output);
      resolve();
    });
    writeStream.on("error", reject);
  });
}

run().catch(err => {
  console.error("❌ Error:", err);
});
